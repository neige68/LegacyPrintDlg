skltn-owl-dlgapp - OWL Dialog-based Application スケルトン

* 使用方法
  * スケルトンをクローン: git clone q:/git/skltn-owl-dlgapp.git foo
  * cd foo
  * ResEdit を使用する場合は git checkout resedit
  * git から外れる: rm -rf .git
  * 新たにローカルリポジトリ作成: git init
  * First Commit
  * リモートリポジトリ作成: git init --bare --shared q:/git/foo.git
  * リモートリポジトリ登録: git remote add origin q:/git/foo.git
  * リモートリポジトリへプッシュ: git push --set-upstream origin master

v CMakeLists.txt の coding で unix を指定しているが、git
  によりプラットフォームに合わせられてしまうので無指定とする。

v recource.rc を ResEdit (ResEdit.net) で編集できるようにする。
  * 現在使用しているバージョンは 1.6.6-x64 で N:\tools\ResEdit-x64 に
    インストールしている。
  * ResEdit の設定は以下のようにする
    * オプション -> 設定 -> 全般 -> 言語 -> UI言語 を Japanese
    * オプション -> 設定 -> Code generation -> Files -> ヘッダーファイ
      ル名 は %barefilename%.rh を指定する。
    * オプション -> 設定 -> 全般 -> INCLUDEパス には Windows SDK の
      includeパスを登録する。
      * 現在は N:\Windows Kits\10\Include\
    * オプション -> 設定 -> Code generation -> Resource script
      template で #include <richedit.h> をコメントにする(ResEdit で読
      み込む時にエラーとなるので)。現在コメントを追加し以下のようになっ
      ている。
----------
//
// Note: Resource script file to be edited by ResEdit
//

#include <windows.h>
#include <commctrl.h>
//#include <richedit.h>
#include "%RESOURCE_HEADER%"

%RESOURCES%

// end of resource script file.
----------  
  * ResEdit のデフォルトのヘッダファイルは resource.h であるが
    resource.rh に変更している。
  * recource.rc, recource.rh には余計なものを入れず ResEdit 専用とする
  * テキストエディタで編集するファイルは res.rc, res.rh とする。
    * res.rh で resource.rh を #include
    * res.rc で resource.rc を #include
  * ResEdit では、ダイアログIDは 100 から、ダイアログコントロールID は
    40000 から付けるようになっている。ヘッダファイルを忖度してはくれない。
    なのでそれに合わせる。

v ブランチ vside を作り、ResEdit でなく Visual Studio の IDE でダイア
  ログリソースを変更できるようにする。
  * 参考: ../try-richedit
  * resource.rc は単独でリソースコンパイルする。とりあえず cp932 のま
    まとする。
  * Visual Studio の IDE で生成される resource.aps は .git に保存しな
    い。.gitignore に記述する。
  * resource.rh を廃止し resource.h を使用する。
  * res.rh から resource.h を #include する。

v ResEdit 用をブランチ resedit とし、master は Visual Studio IDE用とす
  る。

v OWL6.44.8/VC141 に加えて OWL7.0.1/VC142 でビルドする
  LGS (Library-and-Generator-Set) 1 を追加。
  * ビルドディレクトリは build1 とする
  * build.bat から一部を buildlgs.bat に移し呼び出す。
  * cmake は環境変数 LGS で動作を切り替える
  * コンパイルオプション /std:c++17 も必要
  * ポインタから int への reinterpret_cast に警告が出る。int でなく
    INT_PTR を使用するべき。

* LGS 0 は OWL6.44.14/VC142, LGS 1 は OWL7.0.2/VC142 とする。

v コメントを近代化

v UNICODE 対応
  * build.bat から buildlgs.bat の第2引数に UNICODE を渡すか否かで切り替える
  * buildlgs.bat では第2引数に UNICODE が指定された場合、ビルドディレ
    クトリの末尾に u を足し、cmake を -D UNICODE=1 オプションつきで呼び
    出す。
  * CMakeLists.txt では UNICODE が指定されている場合、コンパイラマクロ
    定義に UNICODE;_UNICODE を追加し、リンクオプションに
    /Entry:wWinMainCRTStartup を追加する。
    * なお C マクロの UNICODE は Windows ヘッダファイルの動作を切り替
      え、 _UNICODE は C ランタイムライブラリの動作を切り替える。これ
      は C 言語の規格上 _ で始まる名前は言語処理系のために予約されてい
      るのに対応している。
  * OWLNext では _UNICODE の定義に応じて <owl/defs.h> にて std::string
    か std::wstring に切り替わる typedef owl::tstring と関数
    owl::to_tstring が定義される。tstring から std::string,
    std::wstring への変換は <owl/string.h> の class owl::TString を使
    用すると、変換メンバ関数 operator const char* () や operator const
    wchar_t* () で行える。
    * 特に owl::tstring を std::runtime_error コンストラクタなどに渡す
      のに const char* に変換したい場合は owl::TString インスタンスを
      生成すれば変換してくれる。
      * eg: throw std::runtime_error{owl::TString{_T("LoadStr: ") + GetErrorMessage(e)}};
  * ostringstream, wostringstream に切り替えられる tostringstream など
    を使用したいことがよくあるが、これらも <owl/private/strmdefs.h> で
    定義されている。
